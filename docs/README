README:
To use AUSTIN you have to follow these steps:
- Instrument source(s)
- Compile instrumented source (manually)
- Run AUSTIN

AUSTIN uses a configuration file to set certain parameters (see attached austin.inp file for an example). You can either specify the path to this configuration file by setting the environment variable AustinINP, or via the command line using the -conf option.

Instrumentation:
To instrument a function call

austin.native -i -fut <name of function under test> -conf /path to /austin.inp <sources>

Compilation:
You have to manually compile the instrumented file with a C++ compiler and link it against libAustinLib.a

g++ -o /path to/sut.exe /path to/austin_instrumented.o -L /path to libAustinLib.a/ -lAustinLib -ldl -lm

Execution:

austin.native -sut /path to /sut.exe 


To build AUSTIN from source you require
- cil
- ocaml

You need to build the following Ocaml files (which use the Ocaml libraries str,unix,cil,nums):
- commandLineHandler.byte
- symtrace.cmx
- solutionManager.cmx

To build the library:
- compile all the cpp files under AustinLib/src
- build an object file using ocamlopt and the following cmx files: configFile.cmx options.cmx logManager.cmx utils.cmx symbolic.cmx solution.cmx mainLib.cmx symtrace.cmx solutionManager.cmx

For example: 

ocamlopt -output-obj -o camlcode.o -I "/path to/cil-1.3.7/obj/x86_LINUX/" -I "/path to AustinOcaml object files/"  str.cmxa unix.cmxa cil.cmxa configFile.cmx options.cmx logManager.cmx utils.cmx symbolic.cmx solution.cmx mainLib.cmx symtrace.cmx solutionManager.cmx

When building the archive with ar, include the object file (e.g. camlcode.o) along with the compiled cpp files. You may also want to extract the object files from libasmrun.a,libstr.a,libunix.a,libperfcount.a (from cil) and include those. Otherwise you have to include those libraries when linking the instrumented object file.
